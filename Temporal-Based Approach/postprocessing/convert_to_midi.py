import pretty_midi

class ConvertToMIDI():
    '''
    Combine the pitch values, velocity, duration etc. to music and save in MIDI format
    '''

    def __init__(self):
        self.cello_c_chord = pretty_midi.PrettyMIDI()
        self.cello_program = pretty_midi.instrument_name_to_program('Acoustic Grand Piano')
        self.cello = pretty_midi.Instrument(program=self.cello_program)

    def normalization(self,input_data,divided_factor,multiplied_factor):
        '''
        

        Parameters:
            - input_data (float) :
            - divided_factor (int) :
            - multiplied_factor (int) :

        Returns:
            - normalized list

        '''
        for i in range(len(input_data)):
            input_data[i]=int((input_data[i]*multiplied_factor)/divided_factor)
        return input_data

    def convert_start_time(self,start_time_list):
        '''
        

        Parameters:
            - start_time_list (list) :

        Returns:
            - Start time List

        '''
        value=start_time_list[0]
        for i in range(len(start_time_list)):
            start_time_list[i]=start_time_list[i]-value
        return start_time_list

    def music_generation(self,input_values,actual_values,duration,velocity_values,start_time, file_name):
        '''
        

        Parameters:
            - input_values (list) : 
            - actual_values (torch.Tensor) :
            - duration (torch.Tensor) :
            - velocity_values (list) :
            - start_time (list):
            - file_name (string):

        Returns:
            - None

        '''


        final_list=[]
        final_end_time_list=[]
        counter=0
        #print(len(actual_values))
        
        for i in range(len(input_values)):
            if(i==0):
                note=pretty_midi.Note(pitch=int(input_values[i]),velocity=int(velocity_values[i]),start=start_time[i],end=start_time[i]+duration[i])
                self.cello.notes.append(note)
                final_list.append(note)
                note=pretty_midi.Note(pitch=int(actual_values[counter]),velocity=int(velocity_values[i]),start=start_time[i],end=start_time[i]+duration[i])
                final_end_time_list.append(start_time[i]+duration[i])
                self.cello.notes.append(note)
                final_list.append(note)
            else:
                if((start_time[i]-final_end_time_list[counter])>=0):
                    
                    counter+=1
                    note=pretty_midi.Note(pitch=int(input_values[i]),velocity=int(velocity_values[i]),start=start_time[i],end=start_time[i]+duration[i])
                    self.cello.notes.append(note)
                    final_list.append(note)
                    note=pretty_midi.Note(pitch=int(actual_values[counter]),velocity=int(velocity_values[i]),start=start_time[i],end=start_time[i]+duration[i])
                    self.cello.notes.append(note)
                    final_list.append(note)
                    final_end_time_list.append(start_time[i]+duration[i])
                else:
                    note=pretty_midi.Note(pitch=int(input_values[i]),velocity=int(velocity_values[i]),start=start_time[i],end=start_time[i]+duration[i])
                    self.cello.notes.append(note)
                    final_list.append(note)
        self.cello_c_chord.instruments.append(self.cello)
   
        # Write out the MIDI data
        # print(counter)
        print(final_list)

        self.cello_c_chord.write('..output/{}.mid'.format(file_name))
            
        
        
# if __name__ == '__main__':
#     start_time=[10.75, 11.0, 11.25, 11.5, 11.75, 12.0, 12.25, 12.5, 12.75, 13.0, 13.25, 13.5, 13.75, 14.0, 14.25, 14.5, 14.75, 15.25, 15.5, 15.75, 16.0, 16.25, 16.5, 16.75, 17.0, 17.25, 17.5, 17.75, 18.0, 18.25, 18.75, 19.0, 19.25, 19.5, 19.75, 20.0, 20.25, 20.5, 20.75, 21.25, 21.5, 21.75, 22.0, 22.25, 22.5, 22.75, 23.0, 23.5, 23.75, 24.0, 24.25, 24.5, 24.75, 25.0, 25.25, 25.5, 25.75, 26.0, 26.25, 26.5, 26.75, 27.0, 27.5, 28.25, 28.5, 28.75, 29.25, 29.5, 30.0, 30.25, 31.0, 31.25, 31.75, 32.0, 32.5, 33.0, 33.25, 33.75, 34.25, 34.75, 35.0, 35.25, 35.5, 36.0, 36.5, 36.75, 37.0, 37.5, 38.0, 38.5, 39.25, 39.5, 39.75, 40.0, 40.5, 40.75, 41.25, 41.75, 42.0, 42.5, 42.75, 43.5, 43.75, 44.0, 44.25, 44.75, 45.25, 45.75, 46.25, 46.5, 47.0, 47.25, 47.75, 48.0, 48.5, 48.75, 49.25, 49.75, 50.25, 50.5, 50.75, 51.0, 51.25, 51.75, 52.0, 52.5, 52.75, 53.25, 53.5, 53.75, 54.0, 54.25, 54.5, 54.75, 55.25, 55.5, 55.75, 56.0, 56.25, 56.75, 57.0, 57.25, 57.5, 57.75, 59.25, 59.75, 61.25, 61.5, 61.75, 62.0, 62.25, 62.5, 62.75, 63.0, 63.25, 63.5, 63.75, 64.0, 64.25, 64.5, 64.75, 65.0, 65.25, 65.5, 65.75, 66.0, 66.25, 66.5, 67.0, 67.25, 67.5, 67.75, 68.0, 68.5, 68.75, 69.0, 69.25, 69.5, 69.75, 70.0, 70.25, 70.5, 70.75, 71.0, 71.25, 71.5, 71.75, 72.0, 72.25, 72.5, 72.75, 73.0, 73.25, 73.5, 73.75, 74.0, 74.25, 74.5, 74.75, 75.25, 75.5, 75.75, 76.0, 76.25, 76.5, 76.75, 77.0, 77.25, 77.5, 77.75, 78.0, 78.5, 78.75, 79.0, 79.25, 79.5, 79.75, 80.0, 80.25, 80.75, 81.0, 81.25, 81.5, 81.75, 82.0, 82.25, 82.5, 82.75, 83.0, 83.25, 83.75, 84.0, 84.25, 84.5, 84.75, 85.0, 85.5, 85.75, 86.0, 86.25]
#     duration=[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.75, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.25, 0.25, 0.25, 0.25, 1.0, 1.0, 1.0, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]
#     volume=[53, 53, 56, 53, 56, 57, 55, 52, 48, 53, 50, 47, 50, 47, 52, 48, 50, 50, 54, 51, 51, 49, 46, 42, 43, 44, 46, 45, 45, 50, 50, 52, 52, 56, 56, 53, 52, 50, 51, 53, 53, 56, 56, 58, 56, 49, 49, 58, 54, 54, 53, 51, 53, 54, 52, 57, 58, 61, 60, 58, 53, 52, 50, 52, 51, 55, 55, 50, 53, 45, 43, 49, 46, 49, 51, 47, 41, 37, 34, 32, 31, 32, 33, 34, 35, 35, 37, 34, 34, 35, 36, 34, 38, 38, 39, 35, 38, 47, 42, 35, 38, 32, 30, 32, 29, 30, 30, 32, 30, 32, 32, 29, 32, 32, 35, 34, 38, 37, 40, 39, 35, 34, 35, 36, 36, 36, 33, 35, 35, 35, 35, 32, 30, 31, 33, 34, 32, 29, 31, 32, 34, 33, 37, 37, 38, 35, 38, 45, 45, 47, 47, 51, 48, 45, 46, 45, 41, 44, 42, 42, 43, 42, 46, 44, 51, 54, 60, 60, 56, 58, 61, 60, 55, 57, 59, 57, 55, 58, 55, 53, 52, 49, 52, 49, 49, 50, 52, 52, 49, 51, 52, 52, 47, 44, 47, 44, 44, 41, 43, 42, 46, 47, 45, 48, 39, 41, 40, 45, 46, 46, 44, 48, 50, 46, 43, 45, 42, 41, 44, 43, 46, 45, 45, 47, 45, 45, 44, 45, 48, 46, 41, 39, 43, 42, 42, 42, 41, 40, 39, 40]
#     notes_predicted=[53, 55, 53, 51, 50, 51, 53, 55, 58, 58, 59, 58, 56, 51, 55, 50, 51, 55, 56, 57, 59, 59, 60, 60, 55, 53, 54, 55, 57, 57, 56, 53, 55, 56, 57, 58, 58, 57, 56, 59, 59, 59, 60, 61, 60, 58, 58, 57, 54, 54, 54, 59, 60, 61, 61, 64, 64, 61, 60, 58, 56, 55, 53, 51, 55, 56, 56, 58, 57, 56, 56, 57, 60, 61, 62, 62, 64, 68, 69, 69, 71, 72, 73, 74, 72, 70, 72, 72, 75, 77, 78, 77, 76, 77, 76, 77, 75, 75, 76, 77, 80, 79, 75, 75, 78, 76, 78, 78, 78, 78, 75, 73, 69, 68, 67, 64, 66, 65, 67, 70, 80, 78, 79, 77, 81, 83, 83, 81, 84, 83, 87, 85, 82, 82, 83, 85, 83, 83, 81, 78, 78, 79, 82, 79, 79, 81, 82, 82, 81, 83, 84, 84, 84, 81, 76, 76, 75, 77, 76, 77, 79, 79, 77, 73, 71, 71, 70, 70, 70, 69, 67, 67, 64, 65, 62, 64, 62, 66, 68, 64, 66, 66, 67, 66, 64, 60, 62, 67, 68, 67, 64, 66, 61, 62, 61, 64, 65, 66, 65, 67, 65, 60, 61, 57, 71, 79, 79, 75, 78, 77, 76, 73, 72, 69, 68, 72, 70, 72, 72, 74, 75, 78, 80, 78, 78, 78, 78, 84, 85, 86, 86, 87, 87, 88, 90, 87, 87, 86, 87, 87]
#     actual_input=[53, 55, 53, 51, 50, 52, 53, 55, 58, 58, 59, 58, 56, 52, 55, 50, 51, 55, 56, 57, 59, 59, 60, 60, 55, 53, 54, 55, 57, 57, 56, 53, 55, 56, 57, 58, 58, 57, 56, 59, 59, 59, 60, 61, 60, 58, 58, 57, 54, 54, 54, 59, 60, 61, 61, 64, 64, 61, 60, 58, 56, 55, 53, 52, 55, 56, 56, 58, 57, 56, 56, 57, 60, 61, 62, 62, 64, 68, 69, 69, 71, 72, 73, 74, 72, 70, 72, 72, 75, 77, 78, 77, 76, 77, 76, 77, 75, 75, 76, 77, 80, 79, 75, 75, 78, 76, 78, 78, 78, 78, 75, 73, 69, 68, 67, 64, 66, 65, 67, 70, 80, 78, 79, 77, 81, 83, 83, 81, 84, 83, 87, 85, 82, 82, 83, 85, 83, 83, 81, 78, 78, 79, 82, 79, 79, 81, 82, 82, 81, 83, 84, 84, 84, 81, 76, 76, 75, 77, 76, 77, 79, 79, 77, 73, 71, 71, 70, 70, 70, 69, 67, 67, 64, 65, 62, 64, 62, 66, 68, 64, 66, 66, 67, 66, 64, 60, 62, 67, 68, 67, 64, 66, 61, 62, 61, 64, 65, 66, 65, 67, 65, 60, 61, 57, 71, 79, 79, 75, 78, 77, 76, 73, 72, 69, 68, 72, 70, 72, 72, 74, 75, 78, 80, 78, 78, 78, 78, 84, 85, 86, 86, 87, 87, 88, 90, 87, 87, 86, 87, 87]

#     for i in range(len(duration)):
#         duration[i]=duration[i]+2

#     value=ConvertToMIDI().normalization(notes_predicted,90,50)
#     # print(value)

#     start_time=ConvertToMIDI().convert_start_time(start_time)
#     result=ConvertToMIDI().music_generation(value,actual_input,duration,volume,start_time,"xyz")
